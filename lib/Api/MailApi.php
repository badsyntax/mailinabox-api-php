<?php
/**
 * MailApi
 * PHP version 5
 *
 * @category Class
 * @package  MailInABoxAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Mail-in-a-Box
 *
 * Mail-in-a-Box API HTTP specification.
 *
 * The version of the OpenAPI document: 0.47.0
 * Contact: contact@mailinabox.email
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.3.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace MailInABoxAPI\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use MailInABoxAPI\Client\ApiException;
use MailInABoxAPI\Client\Configuration;
use MailInABoxAPI\Client\HeaderSelector;
use MailInABoxAPI\Client\ObjectSerializer;

/**
 * MailApi Class Doc Comment
 *
 * @category Class
 * @package  MailInABoxAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class MailApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $host_index (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $host_index = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $host_index;
    }

    /**
     * Set the host index
     *
     * @param  int Host index (required)
     */
    public function setHostIndex($host_index)
    {
        $this->hostIndex = $host_index;
    }

    /**
     * Get the host index
     *
     * @return Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation addMailUser
     *
     * Add mail user
     *
     * @param  string $email Email format. (required)
     * @param  string $password password (required)
     * @param  \MailInABoxAPI\Client\Model\MailUserPrivilege $privileges privileges (required)
     *
     * @throws \MailInABoxAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return string|string|string
     */
    public function addMailUser($email, $password, $privileges)
    {
        list($response) = $this->addMailUserWithHttpInfo(
            $email,
            $password,
            $privileges
        );
        return $response;
    }

    /**
     * Operation addMailUserWithHttpInfo
     *
     * Add mail user
     *
     * @param  string $email Email format. (required)
     * @param  string $password (required)
     * @param  \MailInABoxAPI\Client\Model\MailUserPrivilege $privileges (required)
     *
     * @throws \MailInABoxAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of string|string|string, HTTP status code, HTTP response headers (array of strings)
     */
    public function addMailUserWithHttpInfo($email, $password, $privileges)
    {
        $request = $this->addMailUserRequest($email, $password, $privileges);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch ($statusCode) {
                case 200:
                    if ('string' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 400:
                    if ('string' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 403:
                    if ('string' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = 'string';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation addMailUserAsync
     *
     * Add mail user
     *
     * @param  string $email Email format. (required)
     * @param  string $password (required)
     * @param  \MailInABoxAPI\Client\Model\MailUserPrivilege $privileges (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addMailUserAsync($email, $password, $privileges)
    {
        return $this->addMailUserAsyncWithHttpInfo(
            $email,
            $password,
            $privileges
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation addMailUserAsyncWithHttpInfo
     *
     * Add mail user
     *
     * @param  string $email Email format. (required)
     * @param  string $password (required)
     * @param  \MailInABoxAPI\Client\Model\MailUserPrivilege $privileges (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addMailUserAsyncWithHttpInfo($email, $password, $privileges)
    {
        $returnType = 'string';
        $request = $this->addMailUserRequest($email, $password, $privileges);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            $returnType,
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'addMailUser'
     *
     * @param  string $email Email format. (required)
     * @param  string $password (required)
     * @param  \MailInABoxAPI\Client\Model\MailUserPrivilege $privileges (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function addMailUserRequest($email, $password, $privileges)
    {
        // verify the required parameter 'email' is set
        if ($email === null || (is_array($email) && count($email) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $email when calling addMailUser'
            );
        }
        // verify the required parameter 'password' is set
        if (
            $password === null ||
            (is_array($password) && count($password) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $password when calling addMailUser'
            );
        }
        // verify the required parameter 'privileges' is set
        if (
            $privileges === null ||
            (is_array($privileges) && count($privileges) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $privileges when calling addMailUser'
            );
        }

        $resourcePath = '/mail/users/add';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // form params
        if ($email !== null) {
            $formParams['email'] = ObjectSerializer::toFormValue($email);
        }
        // form params
        if ($password !== null) {
            $formParams['password'] = ObjectSerializer::toFormValue($password);
        }
        // form params
        if ($privileges !== null) {
            $formParams['privileges'] = ObjectSerializer::toFormValue(
                $privileges
            );
        }
        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart([
                'text/html',
            ]);
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['text/html'],
                ['application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(
                    ObjectSerializer::sanitizeForSerialization($_tempBody)
                );
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue,
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (
            !empty($this->config->getUsername()) ||
            !empty($this->config->getPassword())
        ) {
            $headers['Authorization'] =
                'Basic ' .
                base64_encode(
                    $this->config->getUsername() .
                        ':' .
                        $this->config->getPassword()
                );
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() .
                $resourcePath .
                ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation addMailUserPrivilege
     *
     * Add mail user privilege
     *
     * @param  string $email Email format. (required)
     * @param  \MailInABoxAPI\Client\Model\MailUserPrivilege $privilege privilege (required)
     *
     * @throws \MailInABoxAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return string|string|string
     */
    public function addMailUserPrivilege($email, $privilege)
    {
        list($response) = $this->addMailUserPrivilegeWithHttpInfo(
            $email,
            $privilege
        );
        return $response;
    }

    /**
     * Operation addMailUserPrivilegeWithHttpInfo
     *
     * Add mail user privilege
     *
     * @param  string $email Email format. (required)
     * @param  \MailInABoxAPI\Client\Model\MailUserPrivilege $privilege (required)
     *
     * @throws \MailInABoxAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of string|string|string, HTTP status code, HTTP response headers (array of strings)
     */
    public function addMailUserPrivilegeWithHttpInfo($email, $privilege)
    {
        $request = $this->addMailUserPrivilegeRequest($email, $privilege);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch ($statusCode) {
                case 200:
                    if ('string' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 400:
                    if ('string' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 403:
                    if ('string' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = 'string';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation addMailUserPrivilegeAsync
     *
     * Add mail user privilege
     *
     * @param  string $email Email format. (required)
     * @param  \MailInABoxAPI\Client\Model\MailUserPrivilege $privilege (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addMailUserPrivilegeAsync($email, $privilege)
    {
        return $this->addMailUserPrivilegeAsyncWithHttpInfo(
            $email,
            $privilege
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation addMailUserPrivilegeAsyncWithHttpInfo
     *
     * Add mail user privilege
     *
     * @param  string $email Email format. (required)
     * @param  \MailInABoxAPI\Client\Model\MailUserPrivilege $privilege (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addMailUserPrivilegeAsyncWithHttpInfo($email, $privilege)
    {
        $returnType = 'string';
        $request = $this->addMailUserPrivilegeRequest($email, $privilege);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            $returnType,
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'addMailUserPrivilege'
     *
     * @param  string $email Email format. (required)
     * @param  \MailInABoxAPI\Client\Model\MailUserPrivilege $privilege (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function addMailUserPrivilegeRequest($email, $privilege)
    {
        // verify the required parameter 'email' is set
        if ($email === null || (is_array($email) && count($email) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $email when calling addMailUserPrivilege'
            );
        }
        // verify the required parameter 'privilege' is set
        if (
            $privilege === null ||
            (is_array($privilege) && count($privilege) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $privilege when calling addMailUserPrivilege'
            );
        }

        $resourcePath = '/mail/users/privileges/add';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // form params
        if ($email !== null) {
            $formParams['email'] = ObjectSerializer::toFormValue($email);
        }
        // form params
        if ($privilege !== null) {
            $formParams['privilege'] = ObjectSerializer::toFormValue(
                $privilege
            );
        }
        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart([
                'text/html',
            ]);
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['text/html'],
                ['application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(
                    ObjectSerializer::sanitizeForSerialization($_tempBody)
                );
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue,
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (
            !empty($this->config->getUsername()) ||
            !empty($this->config->getPassword())
        ) {
            $headers['Authorization'] =
                'Basic ' .
                base64_encode(
                    $this->config->getUsername() .
                        ':' .
                        $this->config->getPassword()
                );
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() .
                $resourcePath .
                ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getMailAliases
     *
     * Get mail aliases
     *
     * @param  \MailInABoxAPI\Client\Model\MailAliasesResponseFormat $format The format of the response. (optional)
     *
     * @throws \MailInABoxAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \MailInABoxAPI\Client\Model\MailAliasByDomain[]|string
     */
    public function getMailAliases($format = null)
    {
        list($response) = $this->getMailAliasesWithHttpInfo($format);
        return $response;
    }

    /**
     * Operation getMailAliasesWithHttpInfo
     *
     * Get mail aliases
     *
     * @param  \MailInABoxAPI\Client\Model\MailAliasesResponseFormat $format The format of the response. (optional)
     *
     * @throws \MailInABoxAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \MailInABoxAPI\Client\Model\MailAliasByDomain[]|string, HTTP status code, HTTP response headers (array of strings)
     */
    public function getMailAliasesWithHttpInfo($format = null)
    {
        $request = $this->getMailAliasesRequest($format);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch ($statusCode) {
                case 200:
                    if (
                        '\MailInABoxAPI\Client\Model\MailAliasByDomain[]' ===
                        '\SplFileObject'
                    ) {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            '\MailInABoxAPI\Client\Model\MailAliasByDomain[]',
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 403:
                    if ('string' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = '\MailInABoxAPI\Client\Model\MailAliasByDomain[]';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MailInABoxAPI\Client\Model\MailAliasByDomain[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getMailAliasesAsync
     *
     * Get mail aliases
     *
     * @param  \MailInABoxAPI\Client\Model\MailAliasesResponseFormat $format The format of the response. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getMailAliasesAsync($format = null)
    {
        return $this->getMailAliasesAsyncWithHttpInfo($format)->then(function (
            $response
        ) {
            return $response[0];
        });
    }

    /**
     * Operation getMailAliasesAsyncWithHttpInfo
     *
     * Get mail aliases
     *
     * @param  \MailInABoxAPI\Client\Model\MailAliasesResponseFormat $format The format of the response. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getMailAliasesAsyncWithHttpInfo($format = null)
    {
        $returnType = '\MailInABoxAPI\Client\Model\MailAliasByDomain[]';
        $request = $this->getMailAliasesRequest($format);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            $returnType,
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getMailAliases'
     *
     * @param  \MailInABoxAPI\Client\Model\MailAliasesResponseFormat $format The format of the response. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getMailAliasesRequest($format = null)
    {
        $resourcePath = '/mail/aliases';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($format !== null) {
            if ('form' === 'form' && is_array($format)) {
                foreach ($format as $key => $value) {
                    $queryParams[$key] = $value;
                }
            } else {
                $queryParams['format'] = $format;
            }
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart([
                'application/json',
                'text/html',
            ]);
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/html'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(
                    ObjectSerializer::sanitizeForSerialization($_tempBody)
                );
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue,
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (
            !empty($this->config->getUsername()) ||
            !empty($this->config->getPassword())
        ) {
            $headers['Authorization'] =
                'Basic ' .
                base64_encode(
                    $this->config->getUsername() .
                        ':' .
                        $this->config->getPassword()
                );
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() .
                $resourcePath .
                ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getMailDomains
     *
     * Get mail domains
     *
     *
     * @throws \MailInABoxAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return string|string
     */
    public function getMailDomains()
    {
        list($response) = $this->getMailDomainsWithHttpInfo();
        return $response;
    }

    /**
     * Operation getMailDomainsWithHttpInfo
     *
     * Get mail domains
     *
     *
     * @throws \MailInABoxAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of string|string, HTTP status code, HTTP response headers (array of strings)
     */
    public function getMailDomainsWithHttpInfo()
    {
        $request = $this->getMailDomainsRequest();

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch ($statusCode) {
                case 200:
                    if ('string' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 403:
                    if ('string' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = 'string';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getMailDomainsAsync
     *
     * Get mail domains
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getMailDomainsAsync()
    {
        return $this->getMailDomainsAsyncWithHttpInfo()->then(function (
            $response
        ) {
            return $response[0];
        });
    }

    /**
     * Operation getMailDomainsAsyncWithHttpInfo
     *
     * Get mail domains
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getMailDomainsAsyncWithHttpInfo()
    {
        $returnType = 'string';
        $request = $this->getMailDomainsRequest();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            $returnType,
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getMailDomains'
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getMailDomainsRequest()
    {
        $resourcePath = '/mail/domains';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart([
                'text/html',
            ]);
        } else {
            $headers = $this->headerSelector->selectHeaders(['text/html'], []);
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(
                    ObjectSerializer::sanitizeForSerialization($_tempBody)
                );
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue,
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (
            !empty($this->config->getUsername()) ||
            !empty($this->config->getPassword())
        ) {
            $headers['Authorization'] =
                'Basic ' .
                base64_encode(
                    $this->config->getUsername() .
                        ':' .
                        $this->config->getPassword()
                );
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() .
                $resourcePath .
                ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getMailUserPrivileges
     *
     * Get mail user privileges
     *
     * @param  string $email The email you want to get privileges for. (optional)
     *
     * @throws \MailInABoxAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \MailInABoxAPI\Client\Model\MailUserPrivilege|string
     */
    public function getMailUserPrivileges($email = null)
    {
        list($response) = $this->getMailUserPrivilegesWithHttpInfo($email);
        return $response;
    }

    /**
     * Operation getMailUserPrivilegesWithHttpInfo
     *
     * Get mail user privileges
     *
     * @param  string $email The email you want to get privileges for. (optional)
     *
     * @throws \MailInABoxAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \MailInABoxAPI\Client\Model\MailUserPrivilege|string, HTTP status code, HTTP response headers (array of strings)
     */
    public function getMailUserPrivilegesWithHttpInfo($email = null)
    {
        $request = $this->getMailUserPrivilegesRequest($email);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch ($statusCode) {
                case 200:
                    if (
                        '\MailInABoxAPI\Client\Model\MailUserPrivilege' ===
                        '\SplFileObject'
                    ) {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            '\MailInABoxAPI\Client\Model\MailUserPrivilege',
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 403:
                    if ('string' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = '\MailInABoxAPI\Client\Model\MailUserPrivilege';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MailInABoxAPI\Client\Model\MailUserPrivilege',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getMailUserPrivilegesAsync
     *
     * Get mail user privileges
     *
     * @param  string $email The email you want to get privileges for. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getMailUserPrivilegesAsync($email = null)
    {
        return $this->getMailUserPrivilegesAsyncWithHttpInfo($email)->then(
            function ($response) {
                return $response[0];
            }
        );
    }

    /**
     * Operation getMailUserPrivilegesAsyncWithHttpInfo
     *
     * Get mail user privileges
     *
     * @param  string $email The email you want to get privileges for. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getMailUserPrivilegesAsyncWithHttpInfo($email = null)
    {
        $returnType = '\MailInABoxAPI\Client\Model\MailUserPrivilege';
        $request = $this->getMailUserPrivilegesRequest($email);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            $returnType,
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getMailUserPrivileges'
     *
     * @param  string $email The email you want to get privileges for. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getMailUserPrivilegesRequest($email = null)
    {
        $resourcePath = '/mail/users/privileges';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($email !== null) {
            if ('form' === 'form' && is_array($email)) {
                foreach ($email as $key => $value) {
                    $queryParams[$key] = $value;
                }
            } else {
                $queryParams['email'] = $email;
            }
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart([
                'text/html',
            ]);
        } else {
            $headers = $this->headerSelector->selectHeaders(['text/html'], []);
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(
                    ObjectSerializer::sanitizeForSerialization($_tempBody)
                );
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue,
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (
            !empty($this->config->getUsername()) ||
            !empty($this->config->getPassword())
        ) {
            $headers['Authorization'] =
                'Basic ' .
                base64_encode(
                    $this->config->getUsername() .
                        ':' .
                        $this->config->getPassword()
                );
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() .
                $resourcePath .
                ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getMailUsers
     *
     * Get mail users
     *
     * @param  \MailInABoxAPI\Client\Model\MailUsersResponseFormat $format The format of the response. (optional)
     *
     * @throws \MailInABoxAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \MailInABoxAPI\Client\Model\MailUsersResponse|string
     */
    public function getMailUsers($format = null)
    {
        list($response) = $this->getMailUsersWithHttpInfo($format);
        return $response;
    }

    /**
     * Operation getMailUsersWithHttpInfo
     *
     * Get mail users
     *
     * @param  \MailInABoxAPI\Client\Model\MailUsersResponseFormat $format The format of the response. (optional)
     *
     * @throws \MailInABoxAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \MailInABoxAPI\Client\Model\MailUsersResponse|string, HTTP status code, HTTP response headers (array of strings)
     */
    public function getMailUsersWithHttpInfo($format = null)
    {
        $request = $this->getMailUsersRequest($format);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch ($statusCode) {
                case 200:
                    if (
                        '\MailInABoxAPI\Client\Model\MailUsersResponse' ===
                        '\SplFileObject'
                    ) {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            '\MailInABoxAPI\Client\Model\MailUsersResponse',
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 403:
                    if ('string' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = '\MailInABoxAPI\Client\Model\MailUsersResponse';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MailInABoxAPI\Client\Model\MailUsersResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getMailUsersAsync
     *
     * Get mail users
     *
     * @param  \MailInABoxAPI\Client\Model\MailUsersResponseFormat $format The format of the response. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getMailUsersAsync($format = null)
    {
        return $this->getMailUsersAsyncWithHttpInfo($format)->then(function (
            $response
        ) {
            return $response[0];
        });
    }

    /**
     * Operation getMailUsersAsyncWithHttpInfo
     *
     * Get mail users
     *
     * @param  \MailInABoxAPI\Client\Model\MailUsersResponseFormat $format The format of the response. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getMailUsersAsyncWithHttpInfo($format = null)
    {
        $returnType = '\MailInABoxAPI\Client\Model\MailUsersResponse';
        $request = $this->getMailUsersRequest($format);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            $returnType,
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getMailUsers'
     *
     * @param  \MailInABoxAPI\Client\Model\MailUsersResponseFormat $format The format of the response. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getMailUsersRequest($format = null)
    {
        $resourcePath = '/mail/users';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($format !== null) {
            if ('form' === 'form' && is_array($format)) {
                foreach ($format as $key => $value) {
                    $queryParams[$key] = $value;
                }
            } else {
                $queryParams['format'] = $format;
            }
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart([
                'application/json',
                'text/html',
            ]);
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/html'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(
                    ObjectSerializer::sanitizeForSerialization($_tempBody)
                );
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue,
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (
            !empty($this->config->getUsername()) ||
            !empty($this->config->getPassword())
        ) {
            $headers['Authorization'] =
                'Basic ' .
                base64_encode(
                    $this->config->getUsername() .
                        ':' .
                        $this->config->getPassword()
                );
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() .
                $resourcePath .
                ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation removeMailAlias
     *
     * Remove mail alias
     *
     * @param  string $address Email format. (required)
     *
     * @throws \MailInABoxAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return string|string|string
     */
    public function removeMailAlias($address)
    {
        list($response) = $this->removeMailAliasWithHttpInfo($address);
        return $response;
    }

    /**
     * Operation removeMailAliasWithHttpInfo
     *
     * Remove mail alias
     *
     * @param  string $address Email format. (required)
     *
     * @throws \MailInABoxAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of string|string|string, HTTP status code, HTTP response headers (array of strings)
     */
    public function removeMailAliasWithHttpInfo($address)
    {
        $request = $this->removeMailAliasRequest($address);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch ($statusCode) {
                case 200:
                    if ('string' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 400:
                    if ('string' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 403:
                    if ('string' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = 'string';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation removeMailAliasAsync
     *
     * Remove mail alias
     *
     * @param  string $address Email format. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function removeMailAliasAsync($address)
    {
        return $this->removeMailAliasAsyncWithHttpInfo($address)->then(
            function ($response) {
                return $response[0];
            }
        );
    }

    /**
     * Operation removeMailAliasAsyncWithHttpInfo
     *
     * Remove mail alias
     *
     * @param  string $address Email format. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function removeMailAliasAsyncWithHttpInfo($address)
    {
        $returnType = 'string';
        $request = $this->removeMailAliasRequest($address);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            $returnType,
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'removeMailAlias'
     *
     * @param  string $address Email format. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function removeMailAliasRequest($address)
    {
        // verify the required parameter 'address' is set
        if (
            $address === null ||
            (is_array($address) && count($address) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $address when calling removeMailAlias'
            );
        }

        $resourcePath = '/mail/aliases/remove';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // form params
        if ($address !== null) {
            $formParams['address'] = ObjectSerializer::toFormValue($address);
        }
        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart([
                'text/html',
            ]);
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['text/html'],
                ['application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(
                    ObjectSerializer::sanitizeForSerialization($_tempBody)
                );
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue,
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (
            !empty($this->config->getUsername()) ||
            !empty($this->config->getPassword())
        ) {
            $headers['Authorization'] =
                'Basic ' .
                base64_encode(
                    $this->config->getUsername() .
                        ':' .
                        $this->config->getPassword()
                );
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() .
                $resourcePath .
                ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation removeMailUser
     *
     * Remove mail user
     *
     * @param  string $email Email format. (required)
     *
     * @throws \MailInABoxAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return string|string|string
     */
    public function removeMailUser($email)
    {
        list($response) = $this->removeMailUserWithHttpInfo($email);
        return $response;
    }

    /**
     * Operation removeMailUserWithHttpInfo
     *
     * Remove mail user
     *
     * @param  string $email Email format. (required)
     *
     * @throws \MailInABoxAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of string|string|string, HTTP status code, HTTP response headers (array of strings)
     */
    public function removeMailUserWithHttpInfo($email)
    {
        $request = $this->removeMailUserRequest($email);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch ($statusCode) {
                case 200:
                    if ('string' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 400:
                    if ('string' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 403:
                    if ('string' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = 'string';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation removeMailUserAsync
     *
     * Remove mail user
     *
     * @param  string $email Email format. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function removeMailUserAsync($email)
    {
        return $this->removeMailUserAsyncWithHttpInfo($email)->then(function (
            $response
        ) {
            return $response[0];
        });
    }

    /**
     * Operation removeMailUserAsyncWithHttpInfo
     *
     * Remove mail user
     *
     * @param  string $email Email format. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function removeMailUserAsyncWithHttpInfo($email)
    {
        $returnType = 'string';
        $request = $this->removeMailUserRequest($email);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            $returnType,
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'removeMailUser'
     *
     * @param  string $email Email format. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function removeMailUserRequest($email)
    {
        // verify the required parameter 'email' is set
        if ($email === null || (is_array($email) && count($email) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $email when calling removeMailUser'
            );
        }

        $resourcePath = '/mail/users/remove';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // form params
        if ($email !== null) {
            $formParams['email'] = ObjectSerializer::toFormValue($email);
        }
        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart([
                'text/html',
            ]);
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['text/html'],
                ['application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(
                    ObjectSerializer::sanitizeForSerialization($_tempBody)
                );
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue,
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (
            !empty($this->config->getUsername()) ||
            !empty($this->config->getPassword())
        ) {
            $headers['Authorization'] =
                'Basic ' .
                base64_encode(
                    $this->config->getUsername() .
                        ':' .
                        $this->config->getPassword()
                );
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() .
                $resourcePath .
                ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation removeMailUserPrivilege
     *
     * Remove mail user privilege
     *
     * @param  string $email Email format. (required)
     * @param  \MailInABoxAPI\Client\Model\MailUserPrivilege $privilege privilege (required)
     *
     * @throws \MailInABoxAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return string|string|string
     */
    public function removeMailUserPrivilege($email, $privilege)
    {
        list($response) = $this->removeMailUserPrivilegeWithHttpInfo(
            $email,
            $privilege
        );
        return $response;
    }

    /**
     * Operation removeMailUserPrivilegeWithHttpInfo
     *
     * Remove mail user privilege
     *
     * @param  string $email Email format. (required)
     * @param  \MailInABoxAPI\Client\Model\MailUserPrivilege $privilege (required)
     *
     * @throws \MailInABoxAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of string|string|string, HTTP status code, HTTP response headers (array of strings)
     */
    public function removeMailUserPrivilegeWithHttpInfo($email, $privilege)
    {
        $request = $this->removeMailUserPrivilegeRequest($email, $privilege);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch ($statusCode) {
                case 200:
                    if ('string' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 400:
                    if ('string' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 403:
                    if ('string' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = 'string';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation removeMailUserPrivilegeAsync
     *
     * Remove mail user privilege
     *
     * @param  string $email Email format. (required)
     * @param  \MailInABoxAPI\Client\Model\MailUserPrivilege $privilege (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function removeMailUserPrivilegeAsync($email, $privilege)
    {
        return $this->removeMailUserPrivilegeAsyncWithHttpInfo(
            $email,
            $privilege
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation removeMailUserPrivilegeAsyncWithHttpInfo
     *
     * Remove mail user privilege
     *
     * @param  string $email Email format. (required)
     * @param  \MailInABoxAPI\Client\Model\MailUserPrivilege $privilege (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function removeMailUserPrivilegeAsyncWithHttpInfo($email, $privilege)
    {
        $returnType = 'string';
        $request = $this->removeMailUserPrivilegeRequest($email, $privilege);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            $returnType,
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'removeMailUserPrivilege'
     *
     * @param  string $email Email format. (required)
     * @param  \MailInABoxAPI\Client\Model\MailUserPrivilege $privilege (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function removeMailUserPrivilegeRequest($email, $privilege)
    {
        // verify the required parameter 'email' is set
        if ($email === null || (is_array($email) && count($email) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $email when calling removeMailUserPrivilege'
            );
        }
        // verify the required parameter 'privilege' is set
        if (
            $privilege === null ||
            (is_array($privilege) && count($privilege) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $privilege when calling removeMailUserPrivilege'
            );
        }

        $resourcePath = '/mail/users/privileges/remove';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // form params
        if ($email !== null) {
            $formParams['email'] = ObjectSerializer::toFormValue($email);
        }
        // form params
        if ($privilege !== null) {
            $formParams['privilege'] = ObjectSerializer::toFormValue(
                $privilege
            );
        }
        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart([
                'text/html',
            ]);
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['text/html'],
                ['application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(
                    ObjectSerializer::sanitizeForSerialization($_tempBody)
                );
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue,
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (
            !empty($this->config->getUsername()) ||
            !empty($this->config->getPassword())
        ) {
            $headers['Authorization'] =
                'Basic ' .
                base64_encode(
                    $this->config->getUsername() .
                        ':' .
                        $this->config->getPassword()
                );
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() .
                $resourcePath .
                ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation setMailUserPassword
     *
     * Set mail user password
     *
     * @param  string $email Email format. (required)
     * @param  string $password password (required)
     *
     * @throws \MailInABoxAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return string|string|string
     */
    public function setMailUserPassword($email, $password)
    {
        list($response) = $this->setMailUserPasswordWithHttpInfo(
            $email,
            $password
        );
        return $response;
    }

    /**
     * Operation setMailUserPasswordWithHttpInfo
     *
     * Set mail user password
     *
     * @param  string $email Email format. (required)
     * @param  string $password (required)
     *
     * @throws \MailInABoxAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of string|string|string, HTTP status code, HTTP response headers (array of strings)
     */
    public function setMailUserPasswordWithHttpInfo($email, $password)
    {
        $request = $this->setMailUserPasswordRequest($email, $password);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch ($statusCode) {
                case 200:
                    if ('string' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 400:
                    if ('string' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 403:
                    if ('string' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = 'string';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation setMailUserPasswordAsync
     *
     * Set mail user password
     *
     * @param  string $email Email format. (required)
     * @param  string $password (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function setMailUserPasswordAsync($email, $password)
    {
        return $this->setMailUserPasswordAsyncWithHttpInfo(
            $email,
            $password
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation setMailUserPasswordAsyncWithHttpInfo
     *
     * Set mail user password
     *
     * @param  string $email Email format. (required)
     * @param  string $password (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function setMailUserPasswordAsyncWithHttpInfo($email, $password)
    {
        $returnType = 'string';
        $request = $this->setMailUserPasswordRequest($email, $password);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            $returnType,
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'setMailUserPassword'
     *
     * @param  string $email Email format. (required)
     * @param  string $password (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function setMailUserPasswordRequest($email, $password)
    {
        // verify the required parameter 'email' is set
        if ($email === null || (is_array($email) && count($email) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $email when calling setMailUserPassword'
            );
        }
        // verify the required parameter 'password' is set
        if (
            $password === null ||
            (is_array($password) && count($password) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $password when calling setMailUserPassword'
            );
        }

        $resourcePath = '/mail/users/password';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // form params
        if ($email !== null) {
            $formParams['email'] = ObjectSerializer::toFormValue($email);
        }
        // form params
        if ($password !== null) {
            $formParams['password'] = ObjectSerializer::toFormValue($password);
        }
        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart([
                'text/html',
            ]);
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['text/html'],
                ['application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(
                    ObjectSerializer::sanitizeForSerialization($_tempBody)
                );
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue,
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (
            !empty($this->config->getUsername()) ||
            !empty($this->config->getPassword())
        ) {
            $headers['Authorization'] =
                'Basic ' .
                base64_encode(
                    $this->config->getUsername() .
                        ':' .
                        $this->config->getPassword()
                );
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() .
                $resourcePath .
                ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation upsertMailAlias
     *
     * Upsert mail alias
     *
     * @param  int $updateIfExists Set to &#x60;1&#x60; when updating an alias. (required)
     * @param  string $address Email format. (required)
     * @param  string $forwardsTo If adding a regular or catch-all alias, the format needs to be &#x60;email1@example.com&#x60;. Multiple address can be separated by newlines or commas.  If adding a domain alias, the format needs to be &#x60;@example.com&#x60;. (required)
     * @param  string $permittedSenders Mail users that can send mail claiming to be from any address on the alias domain. Multiple address can be separated by newlines or commas.  Leave empty to allow any mail user listed in &#x60;forwards_to&#x60; to send mail claiming to be from any address on the alias domain. (required)
     *
     * @throws \MailInABoxAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return string|string|string
     */
    public function upsertMailAlias(
        $updateIfExists,
        $address,
        $forwardsTo,
        $permittedSenders
    ) {
        list($response) = $this->upsertMailAliasWithHttpInfo(
            $updateIfExists,
            $address,
            $forwardsTo,
            $permittedSenders
        );
        return $response;
    }

    /**
     * Operation upsertMailAliasWithHttpInfo
     *
     * Upsert mail alias
     *
     * @param  int $updateIfExists Set to &#x60;1&#x60; when updating an alias. (required)
     * @param  string $address Email format. (required)
     * @param  string $forwardsTo If adding a regular or catch-all alias, the format needs to be &#x60;email1@example.com&#x60;. Multiple address can be separated by newlines or commas.  If adding a domain alias, the format needs to be &#x60;@example.com&#x60;. (required)
     * @param  string $permittedSenders Mail users that can send mail claiming to be from any address on the alias domain. Multiple address can be separated by newlines or commas.  Leave empty to allow any mail user listed in &#x60;forwards_to&#x60; to send mail claiming to be from any address on the alias domain. (required)
     *
     * @throws \MailInABoxAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of string|string|string, HTTP status code, HTTP response headers (array of strings)
     */
    public function upsertMailAliasWithHttpInfo(
        $updateIfExists,
        $address,
        $forwardsTo,
        $permittedSenders
    ) {
        $request = $this->upsertMailAliasRequest(
            $updateIfExists,
            $address,
            $forwardsTo,
            $permittedSenders
        );

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse()
                        ? (string) $e->getResponse()->getBody()
                        : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch ($statusCode) {
                case 200:
                    if ('string' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 400:
                    if ('string' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                case 403:
                    if ('string' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = 'string';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation upsertMailAliasAsync
     *
     * Upsert mail alias
     *
     * @param  int $updateIfExists Set to &#x60;1&#x60; when updating an alias. (required)
     * @param  string $address Email format. (required)
     * @param  string $forwardsTo If adding a regular or catch-all alias, the format needs to be &#x60;email1@example.com&#x60;. Multiple address can be separated by newlines or commas.  If adding a domain alias, the format needs to be &#x60;@example.com&#x60;. (required)
     * @param  string $permittedSenders Mail users that can send mail claiming to be from any address on the alias domain. Multiple address can be separated by newlines or commas.  Leave empty to allow any mail user listed in &#x60;forwards_to&#x60; to send mail claiming to be from any address on the alias domain. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function upsertMailAliasAsync(
        $updateIfExists,
        $address,
        $forwardsTo,
        $permittedSenders
    ) {
        return $this->upsertMailAliasAsyncWithHttpInfo(
            $updateIfExists,
            $address,
            $forwardsTo,
            $permittedSenders
        )->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation upsertMailAliasAsyncWithHttpInfo
     *
     * Upsert mail alias
     *
     * @param  int $updateIfExists Set to &#x60;1&#x60; when updating an alias. (required)
     * @param  string $address Email format. (required)
     * @param  string $forwardsTo If adding a regular or catch-all alias, the format needs to be &#x60;email1@example.com&#x60;. Multiple address can be separated by newlines or commas.  If adding a domain alias, the format needs to be &#x60;@example.com&#x60;. (required)
     * @param  string $permittedSenders Mail users that can send mail claiming to be from any address on the alias domain. Multiple address can be separated by newlines or commas.  Leave empty to allow any mail user listed in &#x60;forwards_to&#x60; to send mail claiming to be from any address on the alias domain. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function upsertMailAliasAsyncWithHttpInfo(
        $updateIfExists,
        $address,
        $forwardsTo,
        $permittedSenders
    ) {
        $returnType = 'string';
        $request = $this->upsertMailAliasRequest(
            $updateIfExists,
            $address,
            $forwardsTo,
            $permittedSenders
        );

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize(
                            $content,
                            $returnType,
                            []
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'upsertMailAlias'
     *
     * @param  int $updateIfExists Set to &#x60;1&#x60; when updating an alias. (required)
     * @param  string $address Email format. (required)
     * @param  string $forwardsTo If adding a regular or catch-all alias, the format needs to be &#x60;email1@example.com&#x60;. Multiple address can be separated by newlines or commas.  If adding a domain alias, the format needs to be &#x60;@example.com&#x60;. (required)
     * @param  string $permittedSenders Mail users that can send mail claiming to be from any address on the alias domain. Multiple address can be separated by newlines or commas.  Leave empty to allow any mail user listed in &#x60;forwards_to&#x60; to send mail claiming to be from any address on the alias domain. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function upsertMailAliasRequest(
        $updateIfExists,
        $address,
        $forwardsTo,
        $permittedSenders
    ) {
        // verify the required parameter 'updateIfExists' is set
        if (
            $updateIfExists === null ||
            (is_array($updateIfExists) && count($updateIfExists) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $updateIfExists when calling upsertMailAlias'
            );
        }
        if ($updateIfExists > 1) {
            throw new \InvalidArgumentException(
                'invalid value for "$updateIfExists" when calling MailApi.upsertMailAlias, must be smaller than or equal to 1.'
            );
        }
        if ($updateIfExists < 0) {
            throw new \InvalidArgumentException(
                'invalid value for "$updateIfExists" when calling MailApi.upsertMailAlias, must be bigger than or equal to 0.'
            );
        }

        // verify the required parameter 'address' is set
        if (
            $address === null ||
            (is_array($address) && count($address) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $address when calling upsertMailAlias'
            );
        }
        // verify the required parameter 'forwardsTo' is set
        if (
            $forwardsTo === null ||
            (is_array($forwardsTo) && count($forwardsTo) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $forwardsTo when calling upsertMailAlias'
            );
        }
        // verify the required parameter 'permittedSenders' is set
        if (
            $permittedSenders === null ||
            (is_array($permittedSenders) && count($permittedSenders) === 0)
        ) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $permittedSenders when calling upsertMailAlias'
            );
        }

        $resourcePath = '/mail/aliases/add';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // form params
        if ($updateIfExists !== null) {
            $formParams['update_if_exists'] = ObjectSerializer::toFormValue(
                $updateIfExists
            );
        }
        // form params
        if ($address !== null) {
            $formParams['address'] = ObjectSerializer::toFormValue($address);
        }
        // form params
        if ($forwardsTo !== null) {
            $formParams['forwards_to'] = ObjectSerializer::toFormValue(
                $forwardsTo
            );
        }
        // form params
        if ($permittedSenders !== null) {
            $formParams['permitted_senders'] = ObjectSerializer::toFormValue(
                $permittedSenders
            );
        }
        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart([
                'text/html',
            ]);
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['text/html'],
                ['application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(
                    ObjectSerializer::sanitizeForSerialization($_tempBody)
                );
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue,
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (
            !empty($this->config->getUsername()) ||
            !empty($this->config->getPassword())
        ) {
            $headers['Authorization'] =
                'Basic ' .
                base64_encode(
                    $this->config->getUsername() .
                        ':' .
                        $this->config->getPassword()
                );
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge($defaultHeaders, $headerParams, $headers);

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() .
                $resourcePath .
                ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen(
                $this->config->getDebugFile(),
                'a'
            );
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException(
                    'Failed to open the debug file: ' .
                        $this->config->getDebugFile()
                );
            }
        }

        return $options;
    }
}
