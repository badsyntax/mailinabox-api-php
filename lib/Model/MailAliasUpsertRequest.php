<?php
/**
 * MailAliasUpsertRequest
 *
 * PHP version 5
 *
 * @category Class
 * @package  MailInABoxAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Mail-in-a-Box
 *
 * Mail-in-a-Box API HTTP specification.
 *
 * The version of the OpenAPI document: 0.46.0
 * Contact: contact@mailinabox.email
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.3.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace MailInABoxAPI\Client\Model;

use \ArrayAccess;
use MailInABoxAPI\Client\ObjectSerializer;

/**
 * MailAliasUpsertRequest Class Doc Comment
 *
 * @category Class
 * @description Mail alias upsert request.
 * @package  MailInABoxAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class MailAliasUpsertRequest implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
     * The original name of the model.
     *
     * @var string
     */
    protected static $openAPIModelName = 'MailAliasUpsertRequest';

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @var string[]
     */
    protected static $openAPITypes = [
        'updateIfExists' => 'int',
        'address' => 'string',
        'forwardsTo' => 'string',
        'permittedSenders' => 'string',
    ];

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @var string[]
     */
    protected static $openAPIFormats = [
        'updateIfExists' => 'int32',
        'address' => 'email',
        'forwardsTo' => null,
        'permittedSenders' => null,
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'updateIfExists' => 'update_if_exists',
        'address' => 'address',
        'forwardsTo' => 'forwards_to',
        'permittedSenders' => 'permitted_senders',
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'updateIfExists' => 'setUpdateIfExists',
        'address' => 'setAddress',
        'forwardsTo' => 'setForwardsTo',
        'permittedSenders' => 'setPermittedSenders',
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'updateIfExists' => 'getUpdateIfExists',
        'address' => 'getAddress',
        'forwardsTo' => 'getForwardsTo',
        'permittedSenders' => 'getPermittedSenders',
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['updateIfExists'] = isset($data['updateIfExists'])
            ? $data['updateIfExists']
            : null;
        $this->container['address'] = isset($data['address'])
            ? $data['address']
            : null;
        $this->container['forwardsTo'] = isset($data['forwardsTo'])
            ? $data['forwardsTo']
            : null;
        $this->container['permittedSenders'] = isset($data['permittedSenders'])
            ? $data['permittedSenders']
            : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['updateIfExists'] === null) {
            $invalidProperties[] = "'updateIfExists' can't be null";
        }
        if ($this->container['updateIfExists'] > 1) {
            $invalidProperties[] =
                "invalid value for 'updateIfExists', must be smaller than or equal to 1.";
        }

        if ($this->container['updateIfExists'] < 0) {
            $invalidProperties[] =
                "invalid value for 'updateIfExists', must be bigger than or equal to 0.";
        }

        if ($this->container['address'] === null) {
            $invalidProperties[] = "'address' can't be null";
        }
        if ($this->container['forwardsTo'] === null) {
            $invalidProperties[] = "'forwardsTo' can't be null";
        }
        if ($this->container['permittedSenders'] === null) {
            $invalidProperties[] = "'permittedSenders' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }

    /**
     * Gets updateIfExists
     *
     * @return int
     */
    public function getUpdateIfExists()
    {
        return $this->container['updateIfExists'];
    }

    /**
     * Sets updateIfExists
     *
     * @param int $updateIfExists Set to `1` when updating an alias.
     *
     * @return $this
     */
    public function setUpdateIfExists($updateIfExists)
    {
        if ($updateIfExists > 1) {
            throw new \InvalidArgumentException(
                'invalid value for $updateIfExists when calling MailAliasUpsertRequest., must be smaller than or equal to 1.'
            );
        }
        if ($updateIfExists < 0) {
            throw new \InvalidArgumentException(
                'invalid value for $updateIfExists when calling MailAliasUpsertRequest., must be bigger than or equal to 0.'
            );
        }

        $this->container['updateIfExists'] = $updateIfExists;

        return $this;
    }

    /**
     * Gets address
     *
     * @return string
     */
    public function getAddress()
    {
        return $this->container['address'];
    }

    /**
     * Sets address
     *
     * @param string $address Email format.
     *
     * @return $this
     */
    public function setAddress($address)
    {
        $this->container['address'] = $address;

        return $this;
    }

    /**
     * Gets forwardsTo
     *
     * @return string
     */
    public function getForwardsTo()
    {
        return $this->container['forwardsTo'];
    }

    /**
     * Sets forwardsTo
     *
     * @param string $forwardsTo If adding a regular or catch-all alias, the format needs to be `email1@example.com`. Multiple address can be separated by newlines or commas.  If adding a domain alias, the format needs to be `@example.com`.
     *
     * @return $this
     */
    public function setForwardsTo($forwardsTo)
    {
        $this->container['forwardsTo'] = $forwardsTo;

        return $this;
    }

    /**
     * Gets permittedSenders
     *
     * @return string
     */
    public function getPermittedSenders()
    {
        return $this->container['permittedSenders'];
    }

    /**
     * Sets permittedSenders
     *
     * @param string $permittedSenders Mail users that can send mail claiming to be from any address on the alias domain. Multiple address can be separated by newlines or commas.  Leave empty to allow any mail user listed in `forwards_to` to send mail claiming to be from any address on the alias domain.
     *
     * @return $this
     */
    public function setPermittedSenders($permittedSenders)
    {
        $this->container['permittedSenders'] = $permittedSenders;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset])
            ? $this->container[$offset]
            : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
