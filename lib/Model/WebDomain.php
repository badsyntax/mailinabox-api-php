<?php
/**
 * WebDomain
 *
 * PHP version 5
 *
 * @category Class
 * @package  MailInABoxAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Mail-in-a-Box
 *
 * Mail-in-a-Box API HTTP specification.  # Introduction This API is documented in [**OpenAPI format**](http://spec.openapis.org/oas/v3.0.3). ([View the full HTTP specification](https://raw.githubusercontent.com/mail-in-a-box/mailinabox/api-spec/api/mailinabox.yml).)  All endpoints are relative to `https://{host}/admin` and are secured with [`Basic Access` authentication](https://en.wikipedia.org/wiki/Basic_access_authentication). If you have multi-factor authentication enabled, authentication with a `user:password` combination will fail unless a valid OTP is supplied via the `x-auth-token` header. Authentication via a `user:user_key` pair is possible without the header being present.
 *
 * The version of the OpenAPI document: 0.51.0
 *
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.3.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace MailInABoxAPI\Client\Model;

use \ArrayAccess;
use MailInABoxAPI\Client\ObjectSerializer;

/**
 * WebDomain Class Doc Comment
 *
 * @category Class
 * @description Web domain details.
 * @package  MailInABoxAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class WebDomain implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
     * The original name of the model.
     *
     * @var string
     */
    protected static $openAPIModelName = 'WebDomain';

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @var string[]
     */
    protected static $openAPITypes = [
        'customRoot' => 'string',
        'domain' => 'string',
        'root' => 'string',
        'sslCertificate' => 'OneOfStringString[]',
        'staticEnabled' => 'bool',
    ];

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @var string[]
     */
    protected static $openAPIFormats = [
        'customRoot' => null,
        'domain' => 'hostname',
        'root' => null,
        'sslCertificate' => null,
        'staticEnabled' => null,
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'customRoot' => 'custom_root',
        'domain' => 'domain',
        'root' => 'root',
        'sslCertificate' => 'ssl_certificate',
        'staticEnabled' => 'static_enabled',
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'customRoot' => 'setCustomRoot',
        'domain' => 'setDomain',
        'root' => 'setRoot',
        'sslCertificate' => 'setSslCertificate',
        'staticEnabled' => 'setStaticEnabled',
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'customRoot' => 'getCustomRoot',
        'domain' => 'getDomain',
        'root' => 'getRoot',
        'sslCertificate' => 'getSslCertificate',
        'staticEnabled' => 'getStaticEnabled',
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['customRoot'] = isset($data['customRoot'])
            ? $data['customRoot']
            : null;
        $this->container['domain'] = isset($data['domain'])
            ? $data['domain']
            : null;
        $this->container['root'] = isset($data['root']) ? $data['root'] : null;
        $this->container['sslCertificate'] = isset($data['sslCertificate'])
            ? $data['sslCertificate']
            : null;
        $this->container['staticEnabled'] = isset($data['staticEnabled'])
            ? $data['staticEnabled']
            : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['customRoot'] === null) {
            $invalidProperties[] = "'customRoot' can't be null";
        }
        if ($this->container['domain'] === null) {
            $invalidProperties[] = "'domain' can't be null";
        }
        if ($this->container['root'] === null) {
            $invalidProperties[] = "'root' can't be null";
        }
        if ($this->container['sslCertificate'] === null) {
            $invalidProperties[] = "'sslCertificate' can't be null";
        }
        if ($this->container['staticEnabled'] === null) {
            $invalidProperties[] = "'staticEnabled' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }

    /**
     * Gets customRoot
     *
     * @return string
     */
    public function getCustomRoot()
    {
        return $this->container['customRoot'];
    }

    /**
     * Sets customRoot
     *
     * @param string $customRoot customRoot
     *
     * @return $this
     */
    public function setCustomRoot($customRoot)
    {
        $this->container['customRoot'] = $customRoot;

        return $this;
    }

    /**
     * Gets domain
     *
     * @return string
     */
    public function getDomain()
    {
        return $this->container['domain'];
    }

    /**
     * Sets domain
     *
     * @param string $domain Hostname format.
     *
     * @return $this
     */
    public function setDomain($domain)
    {
        $this->container['domain'] = $domain;

        return $this;
    }

    /**
     * Gets root
     *
     * @return string
     */
    public function getRoot()
    {
        return $this->container['root'];
    }

    /**
     * Sets root
     *
     * @param string $root root
     *
     * @return $this
     */
    public function setRoot($root)
    {
        $this->container['root'] = $root;

        return $this;
    }

    /**
     * Gets sslCertificate
     *
     * @return OneOfStringString[]
     */
    public function getSslCertificate()
    {
        return $this->container['sslCertificate'];
    }

    /**
     * Sets sslCertificate
     *
     * @param OneOfStringString[] $sslCertificate sslCertificate
     *
     * @return $this
     */
    public function setSslCertificate($sslCertificate)
    {
        $this->container['sslCertificate'] = $sslCertificate;

        return $this;
    }

    /**
     * Gets staticEnabled
     *
     * @return bool
     */
    public function getStaticEnabled()
    {
        return $this->container['staticEnabled'];
    }

    /**
     * Sets staticEnabled
     *
     * @param bool $staticEnabled staticEnabled
     *
     * @return $this
     */
    public function setStaticEnabled($staticEnabled)
    {
        $this->container['staticEnabled'] = $staticEnabled;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset])
            ? $this->container[$offset]
            : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
